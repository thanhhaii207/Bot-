import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackContext
from telegram.error import TimedOut

# C·∫•u h√¨nh logging

# Key VIP cho ph√©p truy c·∫≠p tool VIP
vip_key = "DTHVIP"  # Thay b·∫±ng key th·ª±c t·∫ø

# Danh s√°ch ng∆∞·ªùi d√πng ƒë√£ nh·∫≠p ƒë√∫ng key VIP
vip_users = set()

# Li√™n k·∫øt c√°c file tool mi·ªÖn ph√≠ v√† tool VIP
tools_free = {
    'okx_rancer': '',
    'blum': 'https://drive.google.com/file/d/1rbTQDjsnkyyCzD-FC4JsYEZfWQ5SCz1q/view?usp=drivesdk',
    'babydoge': 'https://drive.google.com/file/d/16SDWS0bUEBbF4M-HwVDRug_4Nd-m3Nyy/view?usp=drivesdk',
    'seed': 'https://drive.google.com/file/d/1d4cmdaX-8eRJ4VdOa7kySM4xv2mlhjH0/view?usp=drivesdk',
    'memefi': 'https://drive.google.com/file/d/1yF6rJ47VW9Ba8dmAEP-UbS98TQff9BR_/view?usp=drivesdk',
    'freedog': 'https://drive.google.com/file/d/1N32tnPc8UqCJGQe-EpccoSzDXpvK_zQk/view?usp=drivesdk',
    'tsubasa': 'https://drive.google.com/file/d/1suhT8kKtuzCUe19xJoBi1-ccBua6vfoW/view?usp=drivesdk',
    'yescoin': 'https://drive.google.com/file/d/1Ciydquv2IrOEJ7tS_BvpTxuZGd8AhsWU/view?usp=drivesdk',
    'matchquets': 'https://drive.google.com/file/d/1VtMxrMnW-szoNlWw47eMSjmxIaPz4542/view?usp=drivesdk',
    'agent301': 'https://drive.google.com/file/d/1NnjxFBsuOG26hwGGBDQSa7KsYusrlb1a/view?usp=drivesdk',
    'midas': 'https://drive.google.com/file/d/11l-2tvy3zZtSY6oWS8mqfJdC8UJjctaK/view?usp=drivesdk',
    'wukong': 'https://drive.google.com/file/d/10xEiLQZkFqnTyh-Vx12ZmbInjVlXSDE8/view?usp=drivesdk',
    'tomarket': 'https://drive.google.com/file/d/1qh0W3AJXufOZC2YewrvKsKR_YHVcBH2q/view?usp=drivesdk',
    'bypass': ' https://drive.google.com/file/d/1h4sxTlV0wpEWtjNtmwj_BlQOR1dQr9to/view?usp=drivesdk ',
    'videohuongdan':'https://youtube.com/@dthtoolairdrop?si=LlmZGArLO3A7GO3c',
    'setup_nodejs': '...',
    'setup_python': '...'
}

tools_vip = {
    'moobix': 'https://drive.google.com/file/d/1JIQwgkZckGt0QMCOSpq0d0wdlVPDugFE/view?usp=drivesdk',
    'xkucoin_ech': 'https://drive.google.com/file/d/1ZhF8BbrUVQ16BPlpYlms4WjFxjlfW6fx/view?usp=drivesdk'
}

# L·ªánh /start ƒë·ªÉ ch√†o m·ª´ng ng∆∞·ªùi d√πng v√† hi·ªÉn th·ªã danh s√°ch tool
async def start(update: Update, context: CallbackContext) -> None:
    user_name = update.message.from_user.first_name
    message = f"Ch√†o m·ª´ng {user_name} ƒë·∫øn v·ªõi bot!\nD∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c tool :\n\n"

    # Th√™m c√°c tool mi·ªÖn ph√≠ v√†o danh s√°ch
    message += "üéÅ **Tool Mi·ªÖn Ph√≠**:\n"
    for tool_name in tools_free.keys():
        message += f"/{tool_name} - T·∫£i {tool_name.capitalize()} t·∫°i ƒë√¢y\n"

    # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë√£ nh·∫≠p ƒë√∫ng key VIP
    if str(update.message.from_user.id) in vip_users:
        message += "\nüîí **Tool VIP**:\n"
        for tool_name in tools_vip.keys():
            message += f"/{tool_name} - T·∫£i {tool_name.capitalize()} t·∫°i ƒë√¢y\n"
    else:
        message += "\nüîí **Tool VIP**:\n B·∫°n c·∫ßn nh·∫≠p key VIP ƒë·ªÉ truy c·∫≠p tool n√†y.\nLink lay Key : htpps://...\nNhap /enter_key (key ƒë√£ l·∫•y) "

    await update.message.reply_text(message)

# L·ªánh nh·∫≠p key VIP
async def enter_key(update: Update, context: CallbackContext) -> None:
    user_id = str(update.message.from_user.id)
    if context.args:
        key = context.args[0]
        if key == vip_key:
            vip_users.add(user_id)
            with open("keybotvip.txt", "a") as file:
                file.write(f"{user_id}\n")
            await update.message.reply_text("B·∫°n ƒë√£ ƒë∆∞·ª£c c·∫•p quy·ªÅn truy c·∫≠p VIP th√†nh c√¥ng! Vui l√≤ng d√πng l·ªánh /start ƒë·ªÉ xem danh s√°ch tool VIP.")
        else:
            await update.message.reply_text("Key kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.")
    else:
        await update.message.reply_text("Vui l√≤ng nh·∫≠p key VIP sau l·ªánh /enter_key.")

# C√°c l·ªánh g·ª≠i link tool mi·ªÖn ph√≠
async def okx_rancer(update: Update, context: CallbackContext) -> None:
    try:
        await update.message.reply_text(f"B·∫°n c√≥ th·ªÉ t·∫£i Tool OKX Rancer t·∫°i ƒë√¢y: {tools_free['okx_rancer']}")
    except TimedOut:
        await update.message.reply_text("Y√™u c·∫ßu b·ªã timeout. Vui l√≤ng th·ª≠ l·∫°i.")

async def setup_python(update: Update, context: CallbackContext) -> None:
    try:
        await update.message.reply_text(f"setup python\n\nL·ªánh 1\n\ntermux-setup-storage && apt update && apt upgrade && pkg install php && pkg install python && pkg install git && pkg install wget && pip install --upgrade pip &&pip install requests && pip install pycurl \n\nL·ªánh 2\n\npip install requests\n\nL·ªánh 3\n\npip install bs4\n\nc√°ch out tool : CTR + C {tools_free['setup_python']}")
    except TimedOut:
        await update.message.reply_text("Y√™u c·∫ßu b·ªã timeout. Vui l√≤ng th·ª≠ l·∫°i.")

async def setup_nodejs(update: Update, context: CallbackContext) -> None:
    try:
        await update.message.reply_text(f"l·ªánh 1. pkg update\nl·ªánh 2. pkg install nodejs\nl·ªánh 3. termux-setup-storage {tools_free['setup_nodejs']}")
    except TimedOut:
        await update.message.reply_text("Y√™u c·∫ßu b·ªã timeout. Vui l√≤ng th·ª≠ l·∫°i.")


async def blum(update: Update, context: CallbackContext) -> None:
    try:
        await update.message.reply_text(f"B·∫°n c√≥ th·ªÉ t·∫£i Tool Blum t·∫°i ƒë√¢y: {tools_free['blum']}")
    except TimedOut:
        await update.message.reply_text("Y√™u c·∫ßu b·ªã timeout. Vui l√≤ng th·ª≠ l·∫°i.")

async def wukong(update: Update, context: CallbackContext) -> None:
    try:
        await update.message.reply_text(f"B·∫°n c√≥ th·ªÉ t·∫£i Tool Wukong t·∫°i ƒë√¢y: {tools_free['wukong']}")
    except TimedOut:
        await update.message.reply_text("Y√™u c·∫ßu b·ªã timeout. Vui l√≤ng th·ª≠ l·∫°i.")

async def tomarket(update: Update, context: CallbackContext) -> None:
    try:
        await update.message.reply_text(f"B·∫°n c√≥ th·ªÉ t·∫£i Tool Tomarket t·∫°i ƒë√¢y: {tools_free['tomarket']}")
    except TimedOut:
        await update.message.reply_text("Y√™u c·∫ßu b·ªã timeout. Vui l√≤ng th·ª≠ l·∫°i.")

async def agent301(update: Update, context: CallbackContext) -> None:
    try:
        await update.message.reply_text(f"B·∫°n c√≥ th·ªÉ t·∫£i Tool Agent301 t·∫°i ƒë√¢y: {tools_free['agent301']}")
    except TimedOut:
        await update.message.reply_text("Y√™u c·∫ßu b·ªã timeout. Vui l√≤ng th·ª≠ l·∫°i.")

async def freedog(update: Update, context: CallbackContext) -> None:
    try:
        await update.message.reply_text(f"B·∫°n c√≥ th·ªÉ t·∫£i Tool Freedog t·∫°i ƒë√¢y: {tools_free['freedog']}")
    except TimedOut:
        await update.message.reply_text("Y√™u c·∫ßu b·ªã timeout. Vui l√≤ng th·ª≠ l·∫°i.")

async def midas(update: Update, context: CallbackContext) -> None:
    try:
        await update.message.reply_text(f"B·∫°n c√≥ th·ªÉ t·∫£i Tool Midas t·∫°i ƒë√¢y: {tools_free['midas']}")
    except TimedOut:
        await update.message.reply_text("Y√™u c·∫ßu b·ªã timeout. Vui l√≤ng th·ª≠ l·∫°i.")

async def seed(update: Update, context: CallbackContext) -> None:
    try:
        await update.message.reply_text(f"B·∫°n c√≥ th·ªÉ t·∫£i Tool Seed t·∫°i ƒë√¢y: {tools_free['seed']}")
    except TimedOut:
        await update.message.reply_text("Y√™u c·∫ßu b·ªã timeout. Vui l√≤ng th·ª≠ l·∫°i.")

async def memefi(update: Update, context: CallbackContext) -> None:
    try:
        await update.message.reply_text(f"B·∫°n c√≥ th·ªÉ t·∫£i Tool Memefi t·∫°i ƒë√¢y: {tools_free['memefi']}")
    except TimedOut:
        await update.message.reply_text("Y√™u c·∫ßu b·ªã timeout. Vui l√≤ng th·ª≠ l·∫°i.")

async def bypass(update: Update, context: CallbackContext) -> None:
    try:
        await update.message.reply_text(f"B·∫°n c√≥ th·ªÉ t·∫£i bypass t·∫°i ƒë√¢y: {tools_free['bypass']}")
    except TimedOut:
        await update.message.reply_text("Y√™u c·∫ßu b·ªã timeout. Vui l√≤ng th·ª≠ l·∫°i.")
        
async def videohuongdan(update: Update, context: CallbackContext) -> None:
    try:
        await update.message.reply_text(f"LINK K√äNH HD : {tools_free['videohuongdan']}")
    except TimedOut:
        await update.message.reply_text("Y√™u c·∫ßu b·ªã timeout. Vui l√≤ng th·ª≠ l·∫°i.")

async def babydoge(update: Update, context: CallbackContext) -> None:
    try:
        await update.message.reply_text(f"B·∫°n c√≥ th·ªÉ t·∫£i Tool Babydoge t·∫°i ƒë√¢y: {tools_free['babydoge']}")
    except TimedOut:
        await update.message.reply_text("Y√™u c·∫ßu b·ªã timeout. Vui l√≤ng th·ª≠ l·∫°i.")

async def tsubasa(update: Update, context: CallbackContext) -> None:
    try:
        await update.message.reply_text(f"B·∫°n c√≥ th·ªÉ t·∫£i Tool Tsubasa t·∫°i ƒë√¢y: {tools_free['tsubasa']}")
    except TimedOut:
        await update.message.reply_text("Y√™u c·∫ßu b·ªã timeout. Vui l√≤ng th·ª≠ l·∫°i.")
async def yescoin(update: Update, context: CallbackContext) -> None:
    try:
        await update.message.reply_text(f"B·∫°n c√≥ th·ªÉ t·∫£i Tool yescoin t·∫°i ƒë√¢y: {tools_free['yescoin']}")
    except TimedOut:
        await update.message.reply_text("Y√™u c·∫ßu b·ªã timeout. Vui l√≤ng th·ª≠ l·∫°i.")


# L·ªánh g·ª≠i link tool VIP (ch·ªâ cho ng∆∞·ªùi d√πng VIP)
async def moobix(update: Update, context: CallbackContext) -> None:
    user_id = str(update.message.from_user.id)
    if user_id not in vip_users:
        await update.message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p Tool VIP. Vui l√≤ng nh·∫≠p key VIP.")
        return

    try:
        await update.message.reply_text(f"B·∫°n c√≥ th·ªÉ t·∫£i Tool Moobix (VIP) t·∫°i ƒë√¢y: {tools_vip['moobix']}")
    except TimedOut:
        await update.message.reply_text("Y√™u c·∫ßu b·ªã timeout. Vui l√≤ng th·ª≠ l·∫°i.")

async def xkucoin_ech(update: Update, context: CallbackContext) -> None:
    user_id = str(update.message.from_user.id)
    if user_id not in vip_users:
        await update.message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p Tool VIP. Vui l√≤ng nh·∫≠p key VIP.")
        return

    try:
        await update.message.reply_text(f"B·∫°n c√≥ th·ªÉ t·∫£i Tool Xkucoin Ech (VIP) t·∫°i ƒë√¢y: {tools_vip['xkucoin_ech']}")
    except TimedOut:
        await update.message.reply_text("Y√™u c·∫ßu b·ªã timeout. Vui l√≤ng th·ª≠ l·∫°i.")

# Kh·ªüi t·∫°o bot
app = ApplicationBuilder().token("7508981785:AAGOpoH_qcSgBD5l14YeR0mzUfkwgRTPktA")\
    .read_timeout(20)\
    .write_timeout(20)\
    .build()

# Th√™m l·ªánh /start ƒë·ªÉ ch√†o m·ª´ng v√† hi·ªÉn th·ªã danh s√°ch tool
app.add_handler(CommandHandler('start', start))

# Th√™m l·ªánh nh·∫≠p key VIP
app.add_handler(CommandHandler('enter_key', enter_key))

# Th√™m c√°c l·ªánh g·ª≠i link tool t∆∞∆°ng ·ª©ng
app.add_handler(CommandHandler
('yescoin',yescoin))
app.add_handler(CommandHandler('okx_rancer', okx_rancer))
app.add_handler(CommandHandler('blum', blum))
app.add_handler(CommandHandler('babydoge', babydoge))
app.add_handler(CommandHandler('memefi', memefi))
app.add_handler(CommandHandler('agent301', agent301))
app.add_handler(CommandHandler('tsubasa', tsubasa))
app.add_handler(CommandHandler('wukong', wukong))
app.add_handler(CommandHandler('seed', seed))
app.add_handler(CommandHandler('midas', midas))
app.add_handler(CommandHandler('bypass', bypass))
app.add_handler(CommandHandler('videohuongdan', videohuongdan))
app.add_handler(CommandHandler
('setup_python', setup_python))
app.add_handler(CommandHandler
('setup_nodejs', setup_nodejs))
app.add_handler(CommandHandler('freedog', freedog))
app.add_handler(CommandHandler('tomarket', tomarket))
app.add_handler(CommandHandler('xkucoin_ech', xkucoin_ech))
app.add_handler(CommandHandler('moobix', moobix))  # Tool VIP

# Ch·∫°y bot
app.run_polling()